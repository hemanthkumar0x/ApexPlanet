<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Web Skills Mini Project</title>
  <style>
    :root {
      --radius: 10px;
      --shadow: 0 16px 48px rgba(0,0,0,0.08);
      --gap: 1rem;
      --transition: 0.25s ease;
      font-family: system-ui,-apple-system,BlinkMacSystemFont,sans-serif;
      background: #f0f4fb;
      color: #1f2d3a;
    }
    * { box-sizing:border-box; }
    body {
      margin:0;
      min-height:100vh;
      display:flex;
      flex-direction:column;
      gap:1.5rem;
    }
    header {
      padding:1rem 1.25rem;
      background:#2f436e;
      color:#fff;
      display:flex;
      flex-wrap:wrap;
      align-items:center;
      justify-content:space-between;
      gap:0.5rem;
    }
    header .title {
      font-size:1.25rem;
      font-weight:600;
      display:flex;
      align-items:center;
      gap:0.5rem;
    }
    nav {
      display:flex;
      gap:1rem;
      flex-wrap:wrap;
      align-items:center;
    }
    nav a {
      color:#fff;
      text-decoration:none;
      padding:0.4rem 0.75rem;
      border-radius:6px;
      font-size:0.9rem;
      transition: background var(--transition);
    }
    nav a:hover {
      background:rgba(255,255,255,0.1);
    }

    .main {
      flex:1;
      max-width: 1200px;
      margin:0 auto;
      padding:1rem;
      display:grid;
      grid-template-columns: 1fr 1fr;
      gap:2rem;
    }

    /* Card style */
    .card {
      background:#fff;
      border-radius: var(--radius);
      padding:1.5rem 1.75rem;
      box-shadow: var(--shadow);
      display:flex;
      flex-direction:column;
      gap:1rem;
    }
    .card h2 {
      margin:0;
      font-size:1.5rem;
      display:flex;
      align-items:center;
      gap:0.4rem;
    }
    .subtle {
      font-size:0.85rem;
      color:#66788a;
    }

    /* Contact Form */
    .field {
      display:flex;
      flex-direction:column;
      gap:0.25rem;
    }
    label {
      font-weight:600;
      font-size:0.9rem;
    }
    input, textarea {
      padding:0.75rem 1rem;
      border:1px solid #d7e0ed;
      border-radius:8px;
      font-size:1rem;
      resize: vertical;
      transition:border-color var(--transition), box-shadow var(--transition);
    }
    input:focus, textarea:focus {
      outline:none;
      border-color:#5f7fff;
      box-shadow:0 0 0 3px rgba(95,127,255,0.25);
    }
    .error {
      color:#d33;
      font-size:0.75rem;
      min-height:1em;
    }
    .btn {
      padding:0.75rem 1.25rem;
      border:none;
      background:#5f7fff;
      color:#fff;
      border-radius:8px;
      cursor:pointer;
      font-weight:600;
      font-size:1rem;
      transition:filter var(--transition);
    }
    .btn:hover { filter:brightness(1.08); }
    .btn:disabled { opacity:0.6; cursor:not-allowed; }

    .success {
      background:#e6f9ed;
      border:1px solid #6ac17f;
      padding:0.75rem 1rem;
      border-radius:6px;
      color:#1d593b;
      display:inline-block;
      font-size:0.9rem;
    }

    /* Tabs for To-Do / Gallery */
    .tabs {
      display:flex;
      gap:0.5rem;
      margin-bottom:0.75rem;
      flex-wrap:wrap;
    }
    .tab {
      padding:0.5rem 1rem;
      border-radius:6px;
      cursor:pointer;
      font-weight:600;
      background:#f0f4fb;
      border:1px solid transparent;
      transition: var(--transition);
    }
    .tab.active {
      background:#5f7fff;
      color:#fff;
      border-color:#4e6ce0;
    }

    /* To-do */
    .todo-inputs {
      display:flex;
      gap:0.5rem;
      flex-wrap:wrap;
      margin-bottom:0.75rem;
    }
    .todo-inputs input {
      flex:1;
      min-width:140px;
    }
    .tasks {
      list-style:none;
      padding:0;
      margin:0;
      display:flex;
      flex-direction:column;
      gap:0.5rem;
      max-height:320px;
      overflow:auto;
    }
    .task {
      display:flex;
      justify-content: space-between;
      align-items:center;
      padding:0.55rem 0.9rem;
      border:1px solid #e3eaf5;
      border-radius:8px;
      gap:0.5rem;
      background:#fafbfe;
    }
    .task span {
      flex:1;
      word-break: break-word;
    }
    .remove-btn {
      background:transparent;
      border:none;
      cursor:pointer;
      font-size:1.1rem;
      color:#f05353;
      padding:0;
      line-height:1;
    }
    .empty {
      font-size:0.9rem;
      color:#66788a;
    }

    /* Image Gallery */
    .gallery-controls {
      display:flex;
      gap:0.75rem;
      flex-wrap:wrap;
      margin-bottom:0.75rem;
      align-items:center;
    }
    .thumbs {
      display:grid;
      grid-template-columns: repeat(auto-fit,minmax(100px,1fr));
      gap:0.75rem;
    }
    .thumb {
      position:relative;
      border-radius:8px;
      overflow:hidden;
      border:1px solid #d8e1f2;
      background:#f7f9fe;
    }
    .thumb img {
      display:block;
      width:100%;
      height:100%;
      object-fit:cover;
    }
    .thumb .remove {
      position:absolute;
      top:6px;
      right:6px;
      background:rgba(0,0,0,0.55);
      border:none;
      color:#fff;
      border-radius:50%;
      width:24px;
      height:24px;
      cursor:pointer;
      font-size:16px;
      line-height:1;
      display:flex;
      align-items:center;
      justify-content:center;
    }

    /* Layout responsiveness */
    @media (max-width: 1100px){
      .main {
        grid-template-columns: 1fr;
      }
    }
    @media (max-width: 700px){
      header {
        flex-direction:column;
        align-items:flex-start;
      }
      nav { width:100%; justify-content:flex-start; }
    }
  </style>
</head>
<body>
  <header>
    <div class="title">Web Dev Mini Project</div>
    <nav>
      <a href="#contact">Contact</a>
      <a href="#dynamic">Dynamic</a>
    </nav>
  </header>

  <div class="main">
    <!-- Contact Form -->
    <section class="card" id="contact" aria-label="Contact Form">
      <h2>Contact Form</h2>
      <p class="subtle">Build with HTML/CSS and validate with JavaScript.</p>
      <form id="contactForm" novalidate>
        <div class="field">
          <label for="name">Name *</label>
          <input type="text" id="name" name="name" required aria-required="true" />
          <div class="error" data-for="name"></div>
        </div>
        <div class="field">
          <label for="email">Email *</label>
          <input type="email" id="email" name="email" required aria-required="true" />
          <div class="error" data-for="email"></div>
        </div>
        <div class="field">
          <label for="message">Message *</label>
          <textarea id="message" name="message" rows="4" required aria-required="true"></textarea>
          <div class="error" data-for="message"></div>
        </div>
        <div style="display:flex; gap:1rem; flex-wrap:wrap; align-items:center;">
          <button class="btn" type="submit">Submit</button>
          <div id="successMsg" class="success" style="display:none;">Submitted successfully!</div>
        </div>
      </form>
    </section>

    <!-- Dynamic Section: To-do / Gallery -->
    <section class="card" id="dynamic" aria-label="Dynamic Tools">
      <h2>Dynamic Tools</h2>
      <p class="subtle">Switch between interactive To-Do list and Image Gallery.</p>

      <div class="tabs" role="tablist">
        <div class="tab active" data-target="todo" role="tab" aria-selected="true" tabindex="0">To-Do List</div>
        <div class="tab" data-target="gallery" role="tab" aria-selected="false" tabindex="0">Image Gallery</div>
      </div>

      <!-- To-Do Container -->
      <div id="todo" class="panel" role="tabpanel">
        <div class="todo-inputs">
          <input type="text" id="newTask" placeholder="New task..." aria-label="New task input"/>
          <button class="btn" id="addTaskBtn" type="button">Add Task</button>
        </div>
        <ul class="tasks" id="tasksList" aria-label="Task list"></ul>
        <div id="noTasks" class="empty">No tasks yet. Add one above.</div>
      </div>

      <!-- Gallery Container (hidden by default) -->
      <div id="gallery" class="panel" role="tabpanel" style="display:none;">
        <div class="gallery-controls">
          <label for="imageUpload" style="font-weight:600; cursor:pointer;">
            <input type="file" id="imageUpload" accept="image/*" multiple style="display:none;" />
            <span class="btn" style="padding:0.5rem 1rem; font-size:0.9rem;">Upload Images</span>
          </label>
          <div id="galleryNotice" class="subtle">Supported: JPG/PNG. Thumbnails shown below. Remove with Ã—.</div>
        </div>
        <div class="thumbs" id="thumbsContainer" aria-label="Image thumbnails"></div>
        <div id="noImages" class="empty">No images uploaded.</div>
      </div>
    </section>
  </div>

  <script>
    // ---------- Contact Form Validation ----------
    const form = document.getElementById('contactForm');
    const successMsg = document.getElementById('successMsg');
    const showError = (field, msg) => {
      const el = document.querySelector(\`.error[data-for="\${field}"]\`);
      if (el) el.textContent = msg;
    };
    const clearErrors = () => document.querySelectorAll('.error').forEach(e=>e.textContent='');
    const isValidEmail = email => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);

    form.addEventListener('submit', e => {
      e.preventDefault();
      clearErrors();
      let ok = true;
      const name = form.name.value.trim();
      const email = form.email.value.trim();
      const message = form.message.value.trim();
      if (!name) { showError('name','Name is required.'); ok = false; }
      if (!email) {
        showError('email','Email is required.'); ok = false;
      } else if (!isValidEmail(email)) {
        showError('email','Invalid email format.'); ok = false;
      }
      if (!message) { showError('message','Message is required.'); ok = false; }

      if (!ok) return;
      // simulate successful submission
      successMsg.style.display = 'inline-block';
      form.reset();
      setTimeout(()=>{ successMsg.style.display='none'; }, 2500);
    });

    // ---------- Tab Switcher ----------
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => activateTab(tab));
      tab.addEventListener('keydown', e => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          activateTab(tab);
        }
      });
    });
    function activateTab(tab) {
      tabs.forEach(t => {
        t.classList.remove('active');
        t.setAttribute('aria-selected','false');
      });
      tab.classList.add('active');
      tab.setAttribute('aria-selected','true');
      const target = tab.dataset.target;
      document.querySelectorAll('.panel').forEach(p => p.style.display='none');
      document.getElementById(target).style.display='block';
    }

    // ---------- To-Do List ----------
    const addBtn = document.getElementById('addTaskBtn');
    const newTaskInput = document.getElementById('newTask');
    const tasksList = document.getElementById('tasksList');
    const noTasks = document.getElementById('noTasks');

    function updateNoTasks() {
      noTasks.style.display = tasksList.children.length === 0 ? 'block' : 'none';
    }

    function createTask(text) {
      const li = document.createElement('li');
      li.className = 'task';
      const span = document.createElement('span');
      span.textContent = text;
      span.setAttribute('aria-label', text);
      const remove = document.createElement('button');
      remove.className = 'remove-btn';
      remove.setAttribute('aria-label','Remove task');
      remove.innerHTML = '&times;';
      remove.addEventListener('click', () => {
        li.remove();
        updateNoTasks();
      });
      li.append(span, remove);
      return li;
    }

    addBtn.addEventListener('click', () => {
      const val = newTaskInput.value.trim();
      if (!val) return;
      tasksList.appendChild(createTask(val));
      newTaskInput.value = '';
      updateNoTasks();
    });
    newTaskInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') addBtn.click();
    });
    updateNoTasks();

    // ---------- Image Gallery ----------
    const imageUpload = document.getElementById('imageUpload');
    const thumbsContainer = document.getElementById('thumbsContainer');
    const noImages = document.getElementById('noImages');

    function updateNoImages() {
      noImages.style.display = thumbsContainer.children.length === 0 ? 'block' : 'none';
    }

    function createThumb(file) {
      const url = URL.createObjectURL(file);
      const wrapper = document.createElement('div');
      wrapper.className = 'thumb';
      const img = document.createElement('img');
      img.src = url;
      img.alt = file.name;
      const removeBtn = document.createElement('button');
      removeBtn.className = 'remove';
      removeBtn.setAttribute('aria-label','Remove image');
      removeBtn.textContent = 'Ã—';
      removeBtn.addEventListener('click', () => {
        wrapper.remove();
        updateNoImages();
        URL.revokeObjectURL(url);
      });
      wrapper.append(img, removeBtn);
      return wrapper;
    }

    imageUpload.addEventListener('change', (e) => {
      const files = Array.from(e.target.files);
      files.forEach(f => {
        if (!f.type.startsWith('image/')) return;
        thumbsContainer.appendChild(createThumb(f));
      });
      imageUpload.value = ''; // reset to allow re-upload of same
      updateNoImages();
    });

    updateNoImages();
  </script>
</body>
</html>
